# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from datetime import datetime
import logging
import os
import builtins

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from pyrogram import Client
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneCodeInvalid,
    SessionPasswordNeeded,
    PasswordHashInvalid,
    PhoneNumberInvalid,
    FloodWait,
    BadRequest,
    RPCError
)

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from services.config import get_valid_config, save_config
from utils.proxy import get_userbot_proxy

logger = logging.getLogger(__name__)

sessions_dir = os.path.abspath("sessions")
os.makedirs(sessions_dir, exist_ok=True)

_clients = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Client –ø–æ user_id

def is_userbot_active(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ userbot-—Å–µ—Å—Å–∏—è (—É–∂–µ –∑–∞–ø—É—â–µ–Ω Client).
    """
    info = _clients.get(user_id)
    return bool(info and info.get("client") and info.get("started"))


async def try_start_userbot_from_config(user_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω–∞—è userbot-—Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë.
    """
    # –ó–∞–ø—Ä–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    builtins.input = lambda _: (_ for _ in ()).throw(RuntimeError())

    os.makedirs(sessions_dir, exist_ok=True)

    config = await get_valid_config(user_id)
    userbot_data = config.get("USERBOT", {})
    required_fields = ("API_ID", "API_HASH", "PHONE")
    session_name = f"userbot_{user_id}"
    session_path = os.path.join(sessions_dir, f"{session_name}.session")
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if not all(userbot_data.get(k) for k in required_fields):
        logger.error("O—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")

        if os.path.exists(session_path):
            try:
                os.remove(session_path)
                logger.info(".session —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å .session —Ñ–∞–π–ª: {e}")

        journal_path = session_path + "-journal"
        if os.path.exists(journal_path):
            try:
                os.remove(journal_path)
                logger.info("–ñ—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª—ë–Ω.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏: {e}")

        await _clear_userbot_config(user_id)
        return False

    api_id = userbot_data["API_ID"]
    api_hash = userbot_data["API_HASH"]
    phone_number = userbot_data["PHONE"]

    app = await create_userbot_client(user_id, session_name, api_id, api_hash, phone_number, sessions_dir, None)

    if os.path.exists(session_path):
        if os.path.getsize(session_path) < 100:
            logger.error("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")

        try:
            await app.start()
            me = await app.get_me()
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} ({me.id})")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ _clients
            _clients[user_id] = {
                "client": app,
                "started": True,
            }

            return True

        except Exception as e:
            logger.error(f"–°–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {e}")
            try:
                await app.stop()
            except Exception as stop_err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç: {stop_err}")

            try:
                os.remove(session_path)
                logger.info("–£–¥–∞–ª—ë–Ω .session —Ñ–∞–π–ª.")
            except Exception as rm_err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {rm_err}")

            journal = session_path + "-journal"
            if os.path.exists(journal):
                try:
                    os.remove(journal)
                    logger.info("–ñ—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª—ë–Ω.")
                except Exception as j_err:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∂—É—Ä–Ω–∞–ª —Å–µ—Å—Å–∏–∏: {j_err}")

    else:
        logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")

    # –û—á–∏—Å—Ç–∫–∞ USERBOT –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    await _clear_userbot_config(user_id)

    return False


async def _clear_userbot_config(user_id: int):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è USERBOT –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    """
    config = await get_valid_config(user_id)
    config["USERBOT"] = {
        "API_ID": None,
        "API_HASH": None,
        "PHONE": None,
        "USER_ID": None,
        "USERNAME": None,
        "ENABLED": False
    }
    await save_config(config, user_id=user_id)
    logger.info("–î–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –æ—á–∏—â–µ–Ω—ã.")


async def create_userbot_client(user_id: int, session_name: str, api_id: int, api_hash: str, phone: str, sessions_dir: str, proxy: str) -> Client:
    """
    –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Pyrogram Client —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è userbot.
    
    :param session_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—Ñ–∞–π–ª .session)
    :param api_id: api_id –æ—Ç Telegram
    :param api_hash: api_hash –æ—Ç Telegram
    :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ userbot-–∞–∫–∫–∞—É–Ω—Ç–∞
    :param sessions_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–µ—Å—Å–∏–∏
    :return: –û–±—ä–µ–∫—Ç Pyrogram Client
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy_settings = await get_userbot_proxy(user_id)
    return Client(
        name=session_name,
        api_id=api_id,
        api_hash=api_hash,
        phone_number=phone,
        workdir=sessions_dir,
        device_model="Honor HONOR 70",
        system_version="SDK 35",
        app_version="Telegram Android 11.13.1",
        sleep_threshold=30,
        lang_code="en",
        skip_updates=False,
        proxy=proxy_settings
    )


async def start_userbot(message, state):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ userbot-–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    # –ó–∞–ø—Ä–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    builtins.input = lambda _: (_ for _ in ()).throw(RuntimeError())

    data = await state.get_data()
    user_id = message.from_user.id

    session_name = f"userbot_{user_id}"
    session_path = os.path.join(sessions_dir, f"{session_name}.session")

    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone_number = data["phone"]

    app = await create_userbot_client(user_id, session_name, api_id, api_hash, phone_number, sessions_dir, None)

    await app.connect()

    try:
        sent = await app.send_code(phone_number)
        _clients[user_id] = {
            "client": app,
            "phone_code_hash": sent.phone_code_hash,
            "phone": phone_number
        }
        return True
    except ApiIdInvalid:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π api_id –∏ api_hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π api_id –∏ api_hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        return False
    except PhoneNumberInvalid:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return False
    except FloodWait as e:
        logger.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥.")
        await message.answer(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥.")
        return False
    except RPCError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e.MESSAGE}")
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ Telegram API: {e.MESSAGE}")
        return False
    except BadRequest as e:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å: {e}")
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if not app.is_connected:
            await app.disconnect()
            return False


async def continue_userbot_signin(message, state):
    """
    –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é userbot-–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥–∏: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å, –∏ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
    """
    data = await state.get_data()
    user_id = message.from_user.id
    code = data["code"]
    attempts = data.get("code_attempts", 0)

    client_info = _clients.get(user_id)
    if not client_info:
        logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await message.answer("üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return False, False, False

    app = client_info["client"]
    phone = client_info["phone"]
    phone_code_hash = client_info["phone_code_hash"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]

    if not code:
        logger.error("–ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        await message.answer("üö´ –ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return False, False, False

    try:
        await app.sign_in(
            phone_number=phone,
            phone_code_hash=phone_code_hash,
            phone_code=code
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ get_me()
        try:
            me = await app.get_me()
        except Exception:
            logger.error("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è.")
            await message.answer("üö´ –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è.")
            return False, False

        await app.send_message("me", "‚úÖ Userbot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.")
        logger.info(f"Userbot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} ({me.id})")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ _clients
        _clients[user_id] = {
            "client": app,
            "started": True,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        config = await get_valid_config(user_id)
        config["USERBOT"]["API_ID"] = api_id
        config["USERBOT"]["API_HASH"] = api_hash
        config["USERBOT"]["PHONE"] = phone
        config["USERBOT"]["USER_ID"] = me.id
        config["USERBOT"]["USERNAME"] = me.username
        config["USERBOT"]["ENABLED"] = True
        await save_config(config, user_id=user_id)
        
        return True, False, False  # –£—Å–ø–µ—à–Ω–æ, –ø–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–µ retry
    except PhoneCodeInvalid:
        attempts += 1
        await state.update_data(code_attempts=attempts)
        if attempts < 3:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ({attempts}/3). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await message.answer(f"üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ ({attempts}/3). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
            return False, False, True  # retry
        else:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
            await message.answer("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
            return False, False, False  # –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    except SessionPasswordNeeded:
        logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return True, True, False  # –£—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False, False, False


async def finish_userbot_signin(message, state):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é userbot-–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. 
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
    """
    data = await state.get_data()
    user_id = message.from_user.id
    client_info = _clients.get(user_id)

    if not client_info:
        logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await message.answer("üö´ –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return False, False
    
    app = client_info["client"]
    password = data["password"]
    api_id = data["api_id"]
    api_hash = data["api_hash"]
    phone = data["phone"]
    attempts = data.get("password_attempts", 0)

    if not password:
        logger.error("–ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.")
        await message.answer("üö´ –ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return False, False
    
    try:
        await app.check_password(password)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ get_me()
        try:
            me = await app.get_me()
        except Exception:
            logger.error("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è.")
            await message.answer("üö´ –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è.")
            return False, False

        await app.send_message("me", "‚úÖ Userbot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.")
        logger.info(f"Userbot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} ({me.id})")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ _clients
        _clients[user_id] = {
            "client": app,
            "started": True,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        config = await get_valid_config(user_id)
        config["USERBOT"]["API_ID"] = api_id
        config["USERBOT"]["API_HASH"] = api_hash
        config["USERBOT"]["PHONE"] = phone
        config["USERBOT"]["USER_ID"] = me.id
        config["USERBOT"]["USERNAME"] = me.username
        config["USERBOT"]["ENABLED"] = True
        await save_config(config, user_id=user_id)
        return True, False
    except PasswordHashInvalid:
        attempts += 1
        await state.update_data(password_attempts=attempts)
        if attempts < 3:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å ({attempts}/3). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await message.answer(f"üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å ({attempts}/3). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∞")
            return False, True  # retry
        else:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
            await message.answer("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.")
            return False, False  # –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}")
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}")
        return False, False


async def userbot_send_self(user_id: int, text: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∏–º–µ–Ω–∏ —é–∑–µ—Ä–±–æ—Ç–∞.
    """
    client_info = _clients.get(user_id)
    if not client_info:
        logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _clients.")
        return False

    app = client_info["client"]

    try:
        await app.send_message("me", text, parse_mode=None)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    

async def get_userbot_client(user_id: int) -> bool:
    """
    
    """
    client_info = _clients.get(user_id)
    if not client_info:
        logger.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _clients.")
        return False

    app = client_info["client"]

    return app
    

async def delete_userbot_session(user_id: int) -> bool:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç userbot-—Å–µ—Å—Å–∏—é: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥.
    """
    session_name = f"userbot_{user_id}"
    session_path = os.path.join(sessions_dir, f"{session_name}.session")
    journal_path = session_path + "-journal"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
    client_info = _clients.get(user_id)
    if client_info and client_info.get("client"):
        try:
            await client_info["client"].stop()
            logger.info("–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    # –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
    if os.path.exists(session_path):
        try:
            os.remove(session_path)
            logger.info(".session —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å .session —Ñ–∞–π–ª: {e}")

    # –£–¥–∞–ª—è–µ–º journal —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(journal_path):
        try:
            os.remove(journal_path)
            logger.info("–ñ—É—Ä–Ω–∞–ª —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∂—É—Ä–Ω–∞–ª: {e}")

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    await _clear_userbot_config(user_id)

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    if user_id in _clients:
        del _clients[user_id]

    return True


async def get_userbot_stars_balance(user_id: int | None = None) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞.
    """
    uid = user_id if user_id is not None else next(iter(_clients), None)
    client_info = _clients.get(uid)
    if not client_info or not client_info.get("client"):
        logger.error("Userbot –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        return 0

    app = client_info["client"]

    try:
        stars = await app.get_stars_balance()
        return stars
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞: {e}")
        return 0