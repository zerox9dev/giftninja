# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message, TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

class AccessControlMiddleware(BaseMiddleware):
    """
    –ú–∏–¥–ª–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–∞: —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º user_id.
    –û—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
    """
    FREE_CALLBACKS = {"guest_deposit_menu"}
    FREE_STATES = {"ConfigWizard:guest_deposit_amount"}

    def __init__(self, allowed_user_ids: list[int]):
        """
        :param allowed_user_ids: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö user_id.
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        """
        self.allowed_user_ids = allowed_user_ids
        super().__init__()

    async def __call__(self, handler, event: TelegramObject, data: dict):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.
        –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É.
        """
        user = data.get("event_from_user")
        if user and user.id not in self.allowed_user_ids:
            # –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            if isinstance(event, CallbackQuery) and getattr(event, "data", None) in self.FREE_CALLBACKS:
                return await handler(event, data)
            # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–ª–∞—Ç—É (—Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM)
            fsm_state = data.get("state")
            if fsm_state:
                state_name = await fsm_state.get_state()
                if state_name in self.FREE_STATES:
                    return await handler(event, data)
            # –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è-–∏–Ω–≤–æ–π—Å—ã (invoice)
            if isinstance(event, Message):
                if getattr(event, "invoice", None) or getattr(event, "successful_payment", None):
                    return await handler(event, data)
            # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ø—Ä–µ—â–∞–µ–º
            try:
                if isinstance(event, Message):
                    await show_guest_menu(event)
                elif isinstance(event, CallbackQuery):
                    await event.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            return
        return await handler(event, data)
    
async def show_guest_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="guest_deposit_menu")
            ]
        ]
    )
    await message.answer(
        "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ <b>–ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏</b> –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
        "üí∞ –í—ã –º–æ–∂–µ—Ç–µ <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å</b> –∑–≤—ë–∑–¥—ã –≤ –±–æ—Ç.\n"
        "‚õîÔ∏è –£ –≤–∞—Å <b>–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞</b> –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "<b>ü§ñ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: <a href=\"https://github.com/zerox9dev/giftninja\">GitHub</a></b>\n"
        "<b>üê∏ –ê–≤—Ç–æ—Ä: @zerox9dev</b>",
        reply_markup=kb
    )